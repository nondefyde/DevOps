name: AZR TEST CLOUD

on:
#  push:
#    branches:
#      - 'main'

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  project: cloudstmdev
  location: centralus
  configFile: "configs/cloud.json"

jobs:
  envs:
    name: 'Set Environments'
    runs-on: ubuntu-latest
    outputs:
      vm_names: ${{ steps.variables.outputs.vm_names }}
      api_names: ${{ steps.variables.outputs.api_names }}
      environment: ${{ steps.variables.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set App Envs
        id: get-envs
        uses: ./.github/actions/set-envs
        with:
          configFile: ${{ env.configFile }}

      - name: Set Outputs
        id: variables
        shell: bash
        run: |
          echo "vm_names=${{ format('[{0}]', env.vm_names) }}" >> $GITHUB_OUTPUT
          echo "api_names=${{ format('[{0}]', env.api_names) }}" >> $GITHUB_OUTPUT
          echo "environment=${{ steps.env-config.outputs.environment }}" >> $GITHUB_OUTPUT

  apim:
    name: Api Management Service
    needs: [ envs, crg, vn ]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      apimEnvFile: "apim.tfvars"
    outputs:
      apim_id: ${{ steps.set-output.outputs.apim_id }}
      gateway_url: ${{ steps.set-output.outputs.gateway_url }}
      portal_url: ${{ steps.set-output.outputs.portal_url }}
      developer_portal_url: ${{ steps.set-output.outputs.developer_portal_url }}
      management_api_url: ${{ steps.set-output.outputs.management_api_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get cloud config
        id: apim-cloud-config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "api-management"

      - name: convert to json
        id: apimjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.apimEnvFile }}
          prefix: ${{ env.project }}
          group: ${{ needs.crg.outputs.rg_name }}
          environment: ${{ needs.envs.outputs.environment }}
          address_prefix: ${{steps.apim-cloud-config.outputs.address_prefix}}
          capacity: ${{steps.apim-cloud-config.outputs.capacity}}
          sku: ${{steps.apim-cloud-config.outputs.sku}}
          publisher_name: ${{steps.apim-cloud-config.outputs.publisher_name}}
          publisher_email: ${{steps.apim-cloud-config.outputs.publisher_email}}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.apimEnvFile }}
          path: ${{ env.apimEnvFile }}

      - name: Instantiate API Magt Services
        uses: ./.github/actions/tf-azure-script
        id: apim
        with:
          project: ${{ env.project }}
          envFile: ${{ env.apimEnvFile }}
          key: ${{ env.project }}-apim
          working-directory: "tf/azure/apim"
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "apim_id=${{ env.apim_id }}" >> $GITHUB_OUTPUT
          echo "gateway_url=${{ env.gateway_url }}" >> $GITHUB_OUTPUT
          echo "management_api_url=${{ env.management_api_url }}" >> $GITHUB_OUTPUT
          echo "portal_url=${{ env.portal_url }}" >> $GITHUB_OUTPUT
          echo "developer_portal_url=${{ env.developer_portal_url }}" >> $GITHUB_OUTPU

  apimp:
    name: Api Services ${{ matrix.items }}
    needs: [ envs, crg, apim ]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      api_names: ${{ needs.envs.outputs.api_names }}
      apimpEnvFile: "apimp-${{ matrix.items }}.tfvars"
    outputs:
      apim_id: ${{ steps.set-output.outputs.apim_id }}
    strategy:
      matrix:
        items: ${{ fromJSON(needs.envs.outputs.api_names) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get cloud config
        id: apimp-cloud-config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "api-management"

      - name: Print VM Info
        id: vm-info
        run: |
          echo "publisher name ${{ steps.apimp-cloud-config.outputs.publisher_name }}"
          echo "publisher email ${{ steps.apimp-cloud-config.outputs.publisher_email }}"
          echo "publisher api ${{ fromJson(steps.apimp-cloud-config.outputs.apis)[matrix.items]['name'] }}"

      - name: convert to json
        id: apimpjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.apimpEnvFile }}
          prefix: ${{ env.project }}
          group: ${{ needs.crg.outputs.rg_name }}
          name: ${{ matrix.items }}
          display_name: ${{ fromJson(steps.apimp-cloud-config.outputs.apis)[matrix.items]['name'] }}
          suffix: ${{ fromJson(steps.apimp-cloud-config.outputs.apis)[matrix.items]['suffix'] }}
          endpoints: ${{ fromJson(steps.apimp-cloud-config.outputs.apis)[matrix.items]['endpoints'] }}
          header: ${{ fromJson(steps.apimp-cloud-config.outputs.apis)[matrix.items]['header'] }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.apimpEnvFile }}
          path: ${{ env.apimpEnvFile }}

      - name: Api Setups
        uses: ./.github/actions/tf-azure-script
        id: apim
        with:
          project: ${{ env.project }}
          envFile: ${{ env.apimpEnvFile }}
          key: ${{ env.project }}-${{ matrix.items }}-apimp
          working-directory: "tf/azure/apimp"
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "api_management_api_name=${{ env.api_management_api_name }}" >> $GITHUB_OUTPUT
          echo "api_management_api_id=${{ env.api_management_api_id }}" >> $GITHUB_OUTPUT