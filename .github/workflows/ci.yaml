name: CI

on:
  push:
    branches:
      - 'main'
  workflow_run:
    workflows: [ "Infrastructure" ]
    types:
      - completed
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS access key id'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS base64.sh access key'
        required: true
      AWS_REGION:
        description: 'AWS region'
        required: true
    inputs:
      TFAction:
        description: "Destroy Infrastructure"
        type: boolean
        default: false
      is_workflow:
        required: true
        type: boolean
        default: false
      project:
        required: true
        type: string
      service:
        required: true
        type: string
      repository:
        required: true
        type: string
      hostname-format:
        required: true
        type: string
      port:
        required: true
        type: string
      dockerfile:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  current_project: cloudstgdev
  current_port: 8000
  current_hostname_format: "pr-{0}.voomsway.com"
  namespace: stg
  current_service: cloudstgdev-app
  image-name: stmx
  current_dockerfile: './app/Dockerfile'
  appSecret: ${{ secrets.APP_SECRET }}

jobs:
  envs:
    if: ${{ github.event.workflow_run.conclusion == 'success' || inputs.is_workflow == true || github.event_name == 'push' }}
    name: 'Validate Env Variables'
    runs-on: ubuntu-latest
    outputs:
      project: ${{ steps.variables.outputs.project }}
      port: ${{ steps.variables.outputs.port }}
      dockerfile: ${{ steps.variables.outputs.dockerfile }}
      service: ${{ steps.variables.outputs.service }}
      hostname-format: ${{ steps.variables.outputs.hostname-format }}
    steps:
      - name: Initialize environments
        run: |
          EP="${{inputs.project}}"
          PRT="${{inputs.port}}"
          HOST_FMT="${{inputs.hostname-format}}"
          DOCFILE="${{ inputs.dockerfile }}"
          SRV="${{ inputs.service }}"
          
          ENV_HOST_FMT="${{env.current_hostname_format}}"

          PROJECT="${EP:-${{env.current_project}}}"
          PORT="${PRT:-${{env.current_port}}}"
          
          HOST_FORMAT="${HOST_FMT:-$ENV_HOST_FMT}"
          DOCKER_FILE="${DOCFILE:-${{ env.current_dockerfile }}}"
          SERVICE="${SRV:-${{ env.current_service }}}"

          echo "project=${PROJECT}" >> "$GITHUB_ENV"
          echo "port=${PORT}" >> "$GITHUB_ENV"
          echo "hostname-format=${HOST_FORMAT}" >> "$GITHUB_ENV"
          echo "service=${SERVICE}" >> "$GITHUB_ENV"
          echo "dockerfile=${DOCKER_FILE}" >> "$GITHUB_ENV"
      - name: Set Env
        id: variables
        run: |
          echo "project=${{ env.project }}" >> $GITHUB_OUTPUT
          echo "port=${{ env.port }}" >> $GITHUB_OUTPUT
          echo "hostname-format=${{env.hostname-format}}" >> $GITHUB_OUTPUT
          echo "dockerfile=${{ env.dockerfile }}" >> $GITHUB_OUTPUT
          echo "service=${{ env.service }}" >> $GITHUB_OUTPUT

  config:
    if: ${{ github.event.workflow_run.conclusion == 'success' || inputs.is_workflow == true || github.event_name == 'push' }}
    name: 'Setup Config Variables'
    needs: [envs]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      port: ${{ needs.envs.outputs.port }}
      hostname-format: ${{ needs.envs.outputs.hostname-format }}
      dockerfile: ${{ needs.envs.outputs.dockerfile }}
      service: ${{ needs.envs.outputs.service }}
    outputs:
      hostname:       ${{ steps.resolved.outputs.hostname }}
      git-sha:        ${{ steps.resolved.outputs.git-sha }}
      docker-tag:     ${{ steps.resolved.outputs.docker-tag }}
    steps:
      - id: debug-context
        run: |
          echo "event_name      ${{ github.event_name }}"
          echo "project        ${{ env.project }}"
          echo "hostname-format    ${{ env.hostname-format }}"

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

      - name: Slugify Value
        uses: rlespinasse/slugify-value@v1.4.0
        with:
          slug-maxlength: 30
          key: feat-name
          value: ${{ steps.branch-name.outputs.current_branch }}

      - name: Set variables
        id: variables
        run: |
          echo "hostname=${{ format(env.hostname-format, env.FEAT-NAME_SLUG_URL) }}" >> $GITHUB_ENV
          echo "docker-tag=${{ env.FEAT-NAME_SLUG_URL }}" >> $GITHUB_ENV
          echo "git-sha=${{ steps.commit.outputs.short }}" >> $GITHUB_ENV

      - name: Resolve outputs
        id: resolved
        run: |
          echo "git-sha=${{ env.git-sha }}" >> $GITHUB_OUTPUT
          echo "hostname=${{ env.hostname }}" >> $GITHUB_OUTPUT
          echo "docker-tag=${{ env.docker-tag }}" >> $GITHUB_OUTPUT
          echo "hostname      ${{ env.hostname }}"
          echo "event_name      ${{ github.event_name }}"
          echo "docker-tag      ${{ env.docker-tag }}"
          echo "dockerfile      ${{ env.dockerfile }}"

  push-image:
    if: ${{ github.event.workflow_run.conclusion == 'success' || inputs.is_workflow == true || github.event_name == 'push' }}
    name: 'Push Image to Cloud Registry'
    needs: [envs, config]
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      port: ${{ needs.envs.outputs.port }}
      hostname: ${{ needs.config.outputs.hostname }}
      dockerfile: ${{ needs.envs.outputs.dockerfile }}
      service: ${{ needs.envs.outputs.service }}
    steps:
      - name: --- For debugging ---
        id: debug-context
        run: |
          echo "event_name      ${{ github.event_name }}"
          echo "hostname        ${{ needs.config.outputs.hostname }}"
          echo "docker-tag      ${{ needs.config.outputs.docker-tag }}"
          echo "project         ${{ env.project }}"
          echo "dockerfile      ${{ env.dockerfile }}"
          echo "service      ${{ env.service }}"
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ${{ env.dockerfile }}
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.project }}:${{ needs.config.outputs.docker-tag }}-${{ env.service}}

  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || inputs.is_workflow == true || github.event_name == 'push' }}
    needs: [ envs, push-image, config ]
    name: 'deploy to AWS EKS'
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      port: ${{ needs.envs.outputs.port }}
      hostname: ${{ needs.config.outputs.hostname }}
      dockerfile: ${{ needs.envs.outputs.dockerfile }}
      service: ${{ needs.envs.outputs.service }}
    steps:
      - uses: actions/checkout@v2
      - name: Download Repo to Artifact
        if: ${{ inputs.is_workflow == true }}
        uses: actions/download-artifact@master
        with:
          name: cloud-scripts
          path: ${{ inputs.repository }}

      - name: Copy Script files to context
        if: ${{ inputs.is_workflow == true }}
        run: |
          ls
          cp -a "${{ inputs.repository }}/." ./
          rm -r "${{ inputs.repository }}"
          ls -a

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update kubernetes config
        run: |
          echo "aws eks update-kubeconfig --name ${{ env.project }}-cluster --region ${{ secrets.AWS_REGION }}"
          aws eks update-kubeconfig --name ${{ env.project }}-cluster --region ${{ secrets.AWS_REGION }}

      - name: Decode Secret
        if: ${{ env.appSecret }}
        run: |
          DECODED=$(echo ${{ secrets.APP_SECRET }} | base64 --decode > env.yml)
          cat ./env.yml
          ls

      - name: Deploy image to kubernetes cluster
        env:
          APP_NAME:  ${{ env.service}}
          IMAGE_TAG: ${{ needs.config.outputs.docker-tag }}-${{ env.service}}
          NAMESPACE: ${{ env.namespace }}
          INGRESS_HOSTNAME: ${{ env.hostname }}
          REPOSITORY: ${{ steps.login-ecr.outputs.registry }}/${{ env.project }}
          PORT: ${{ env.current_port }}
        run: |
          ls
          kubectl create namespace ${{ env.namespace }} --dry-run=client -o yaml | kubectl apply -f -
          cat ./_kubernetes/service.yml | envsubst | kubectl apply -f -
          cat ./_kubernetes/deployment.yml | envsubst | kubectl apply -f -
          cat ./_kubernetes/ingress.yml | envsubst | kubectl apply -f -
          cat ./env.yml | envsubst | kubectl apply -f -

      - name: Restart Pods
        id: restart-pods
        run: kubectl rollout restart deployment ${{ env.project }}-${{ env.service}}-dpl --namespace=${{ env.namespace }}
        continue-on-error: true # will fail on first deploy

      - name: Cleanups
        run: |
          rm -r .env.yml
          rm -r /home/runner/.kube/config