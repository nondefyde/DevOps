name: AZR VM TEST CI

on:
  push:
    branches:
      - 'main'
  workflow_run:
    workflows: [ "AZR DEPLOY VMS" ]
    types:
      - completed
  workflow_call:
    secrets:
      AZR_CLIENT_ID:
        description: 'Azure client id'
        required: true
      AZR_CLIENT_SECRET:
        description: 'Azure secret key'
        required: true
      AZR_TENANT_ID:
        description: 'Azure tenant id'
        required: true
      AZR_SUBSCRIPTION_ID:
        description: 'Azure subscription id'
        required: true
      AZR_VM_APP_SECRET:
        description: 'Azure Vm env secrets'
      VM_USERNAME:
        description: 'Azure Vm ssh username'
      VM_PASSWORD:
        description: 'Azure Vm ssh password'
    # Map the workflow outputs to job outputs
    outputs:
      HAS_VM:
        description: "If a virtual machine already exist"
        value: ${{ jobs.setups.outputs.HAS_VM }}
    inputs:
      TFAction:
        type: boolean
        default: false
      is_workflow:
        required: true
        type: boolean
        default: false
      project:
        required: true
        type: string
      repository:
        required: true
        type: string
      service:
        required: true
        type: string
      hostname-format:
        required: true
        type: string
      port:
        required: true
        type: string
      dockerfile:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  service: dev
  port: 8000
  hostname_format: "stm-{0}.{1}.bytegum.com"
  image-name: stm-quest
  dockerfile: './ci/Dockerfile'
  environment: 'stg'
  appSecret: ${{ secrets.AZR_VM_APP_SECRET }}
  configFile: "configs/cloud.json"

jobs:
  envs:
    if: ${{ github.event.workflow_run.conclusion == 'success' || inputs.is_workflow == true || github.event_name == 'push' }}
    name: 'Validate Env Variables'
    runs-on: ubuntu-latest
    outputs:
      project: ${{ steps.variables.outputs.project }}
      prefix: ${{ steps.variables.outputs.project }}
      port: ${{ steps.variables.outputs.port }}
      hostname-format: ${{ steps.variables.outputs.hostname-format }}
      dockerfile: ${{ steps.variables.outputs.dockerfile }}
      vm_names: ${{ steps.variables.outputs.vm_names }}
      api_names: ${{ steps.variables.outputs.api_names }}
      environment: ${{ steps.variables.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set App Envs
        id: get-envs
        uses: ./.github/actions/set-envs
        with:
          config-file: ${{ env.configFile }}

      - name: Set Env
        id: variables
        run: |
          for VAR in $(compgen -e); do
            echo "${VAR,,}=${!VAR}" >> $GITHUB_OUTPUT
          done
          
          echo "vm_names=${{ format('[{0}]', env.vm_names) }}" >> $GITHUB_OUTPUT
          echo "api_names=${{ format('[{0}]', env.api_names) }}" >> $GITHUB_OUTPUT

  config:
    name: 'Setup Config Variables'
    needs: [ envs ]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      service: ${{ needs.envs.outputs.service }}
      port: ${{ needs.envs.outputs.port }}
      hostname-format: ${{ needs.envs.outputs.hostname-format }}
      dockerfile: ${{ needs.envs.outputs.dockerfile }}
    outputs:
      hostname: ${{ steps.resolved.outputs.hostname }}
      git-sha: ${{ steps.resolved.outputs.git-sha }}
      docker-tag: ${{ steps.resolved.outputs.docker-tag }}
    steps:
      - id: debug-context
        run: |
          echo "event_name      ${{ github.event_name }}"
          echo "project        ${{ env.project }}"
          echo "hostname-format    ${{ env.hostname-format }}"

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

      - name: Slugify Value
        uses: rlespinasse/slugify-value@v1.4.0
        with:
          slug-maxlength: 30
          key: feat-name
          value: ${{ steps.branch-name.outputs.current_branch }}

      - name: Set variables
        id: variables
        run: |
          echo "hostname=${{ format(env.hostname-format, env.FEAT-NAME_SLUG_URL, env.service) }}" >> $GITHUB_ENV
          echo "docker-tag=${{ env.FEAT-NAME_SLUG_URL }}" >> $GITHUB_ENV
          echo "git-sha=${{ steps.commit.outputs.short }}" >> $GITHUB_ENV

      - name: Resolve outputs
        id: resolved
        run: |
          echo "git-sha=${{ env.git-sha }}" >> $GITHUB_OUTPUT
          echo "hostname=${{ env.hostname }}" >> $GITHUB_OUTPUT
          echo "docker-tag=${{ env.docker-tag }}" >> $GITHUB_OUTPUT

  deploy-image:
    name: 'Push Image'
    needs: [ envs, config ]
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      service: ${{ needs.envs.outputs.service }}
      port: ${{ needs.envs.outputs.port }}
      hostname: ${{ needs.config.outputs.hostname }}
      hostname-format: ${{ needs.envs.outputs.hostname-format }}
      dockerfile: ${{ needs.envs.outputs.dockerfile }}
    steps:
      - name: --- For debugging ---
        id: debug-context
        run: |
          echo "event_name      ${{ github.event_name }}"
          echo "hostname        ${{ needs.config.outputs.hostname }}"
          echo "docker-tag      ${{ needs.config.outputs.docker-tag }}"
          echo "project         ${{ env.project }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Login Azure
        id: login
        run: |
          az login --service-principal --username ${{secrets.AZR_CLIENT_ID}} --password ${{secrets.AZR_CLIENT_SECRET}} --tenant ${{secrets.AZR_TENANT_ID}}
          az acr login --name "${{env.project}}acr.azurecr.io"

      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: linux/amd64
          file: ${{ env.dockerfile }}
          tags: ${{ env.project }}acr.azurecr.io/${{ env.service }}/${{ needs.config.outputs.docker-tag }}

  deploy:
    name: 'Deploy Image - VM ${{ matrix.items }}'
    needs: [ envs, config, deploy-image ]
    runs-on: ubuntu-latest
    env:
      vm: ${{ needs.envs.outputs.vm_names }}
      project: ${{ needs.envs.outputs.project }}
      prefix: ${{ needs.envs.outputs.prefix }}
      service: ${{ needs.envs.outputs.service }}
      port: ${{ needs.envs.outputs.port }}
    strategy:
      matrix:
        items: ${{ fromJSON(needs.envs.outputs.vm_names) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Repo to Artifact
        if: ${{ inputs.is_workflow == true }}
        uses: actions/download-artifact@master
        with:
          name: cloud-scripts
          path: ${{ inputs.repository }}

      - name: Copy Script files to context
        if: ${{ inputs.is_workflow == true }}
        run: |
          ls
          cp -a "${{ inputs.repository }}/." ./
          rm -r "${{ inputs.repository }}"
          ls -a

      - name: Get api config
        id: apimp-cloud-config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "api-management"

      - name: Get vm config
        id: vm-cloud-config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "virtual-machine"

      - name: Get vault config
        id: vault-cloud-config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "key-vault"

      - name: Login Azure
        id: login
        run: az login --service-principal --username ${{secrets.AZR_CLIENT_ID}} --password ${{secrets.AZR_CLIENT_SECRET}} --tenant ${{secrets.AZR_TENANT_ID}}

      - name: Deploy to VM
        id: deploy-vm
        working-directory: "tf/azure/vm/_scripts"
        run: |
          API_SUFFIX=${{ fromJson(steps.apimp-cloud-config.outputs.apis)[matrix.items]['suffix'] }}
          VM_COUNT=${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['vmCount'] }}
          VM_NAME=${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['name'] }}
          CERT_FILE=${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['certFile'] }}
          INSTANCE_COUNT=${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['instanceCount'] }}
          CERT_VAULT=${{ steps.vault-cloud-config.outputs.vaultName }}
          CERT_NAME=${{ steps.vault-cloud-config.outputs.certName }}
          echo "Run Deployment"
          chmod +x execute.sh
          ./execute.sh ${{secrets.AZR_CLIENT_ID}} ${{secrets.AZR_CLIENT_SECRET}} ${{secrets.AZR_TENANT_ID}} \
          ${{ env.project }} ${{ env.prefix }} ${{ env.project }}acr.azurecr.io/${{ env.service }}/${{ needs.config.outputs.docker-tag }}:latest \
          ${{ secrets.AZR_VM_APP_SECRET }} $VM_NAME $VM_COUNT adminuser ${API_SUFFIX}.stardevs.xyz ${{ env.port }} \
          ${{ env.environment }}-$VM_NAME 1 $INSTANCE_COUNT
