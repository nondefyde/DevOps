name: AWS K8 Cloud BUILD

on:
  push:
    branches:
      - 'main'
    paths:
      - '.github/workflows/.**-k8-cloud.yaml'

  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS access key id'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS base64.sh access key'
        required: true
      AWS_REGION:
        description: 'AWS region'
        required: true
    inputs:
      is_workflow:
        required: true
        type: boolean
        default: false
      project:
        required: true
        type: string
      namespace:
        required: true
        type: string
      repository:
        required: true
        type: string
      instance_type:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  configFile: "configs/aws-cloud.json"
  scriptPath: "terraform/aws"

jobs:
  envs:
    name: 'Set Envs'
    runs-on: ubuntu-latest
    outputs:
      project: ${{ steps.variables.outputs.project }}
      bucket_region: ${{ steps.variables.outputs.bucket_region }}
      instance_type: ${{ steps.variables.outputs.instance_type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set App Envs
        id: get-envs
        uses: ./.github/actions/set-aws-envs
        with:
          config-file: ${{ env.configFile }}

      - name: Set Outputs
        id: variables
        shell: bash
        run: |
          for VAR in $(compgen -e); do
            echo "${VAR,,}=${!VAR}" >> $GITHUB_OUTPUT
          done

  buc:
    name: 'Bucket'
    needs: [ envs ]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      bucket_region: ${{ needs.envs.outputs.bucket_region }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Instantiate Bucket
        uses: ./.github/actions/create-aws-bucket
        id: sa
        with:
          bucketName: ${{ env.project }}
          bucketRegion: ${{ env.bucket_region }}
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: ${{secrets.AWS_REGION}}
        continue-on-error: false
  eks:
    name: 'EK Cluster'
    needs: [ envs, buc ]
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.set-output.outputs.cluster_name }}
      account_id: ${{ steps.set-output.outputs.account_id }}
    env:
      project: ${{ needs.envs.outputs.project }}
      bucket_region: ${{ needs.envs.outputs.bucket_region }}
      instance_type: ${{ needs.envs.outputs.instance_type }}
      eksEnvFile: "eks.tfvars"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: convert to json
        id: eksjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.eksEnvFile }}
          project: ${{ env.project }}
          instance_type: ${{ env.instance_type }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.eksEnvFile }}
          path: ${{ env.eksEnvFile }}

      - name: Instantiate EKS Cluster
        uses: ./.github/actions/tf-aws-script
        id: eks
        with:
          envFile: ${{ env.eksEnvFile }}
          project: ${{ env.project }}
          bucketRegion: ${{ env.bucket_region }}
          key: ${{ env.project }}-eks
          working-directory: ${{ env.scriptPath}}/eks
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "cluster_name=${{ env.cluster_name }}" >> $GITHUB_OUTPUT
          echo "account_id=${{ env.account_id }}" >> $GITHUB_OUTPUT

  elb:
    name: 'EL Balancer'
    needs: [ envs, eks ]
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      cluster_name: ${{ steps.set-output.outputs.cluster_name }}
      issuer: ${{ steps.set-output.outputs.issuer }}
      vpc_id: ${{ steps.set-output.outputs.vpc_id }}
    env:
      project: ${{ needs.envs.outputs.project }}
      bucket_region: ${{ needs.envs.outputs.bucket_region }}
      elbEnvFile: "elb.tfvars"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: convert to json
        id: elbjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.elbEnvFile }}
          project: ${{ env.project }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.elbEnvFile }}
          path: ${{ env.elbEnvFile }}

      - name: Instantiate EL Balancer
        uses: ./.github/actions/tf-aws-script
        id: elb
        with:
          envFile: ${{ env.elbEnvFile }}
          project: ${{ env.project }}
          bucketRegion: ${{ env.bucket_region }}
          key: ${{ env.project }}-elb
          working-directory: ${{ env.scriptPath}}/elb
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "cluster_name=${{ env.cluster_name }}" >> $GITHUB_OUTPUT
          echo "issuer=${{ env.issuer }}" >> $GITHUB_OUTPUT
          echo "vpc_id=${{ env.vpc_id }}" >> $GITHUB_OUTPUT

