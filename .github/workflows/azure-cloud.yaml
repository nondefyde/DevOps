name: AZR DEPLOY VMS

on:
  push:
    branches:
      - 'main'

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  project: devcloudstg
  location: centralus
  configFile: "configs/cloud.json"

jobs:
  envs:
    name: 'Set Environments'
    runs-on: ubuntu-latest
    outputs:
      vm_names: ${{ steps.variables.outputs.vm_names }}
#      api_names: ${{ steps.variables.outputs.api_names }}
      environment: ${{ steps.variables.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set App Envs
        id: get-envs
        uses: ./.github/actions/set-envs
        with:
          configFile: ${{ env.configFile }}

      - name: Set Outputs
        id: variables
        shell: bash
        run: |
          echo "vm_names=${{ format('[{0}]', env.vm_names) }}" >> $GITHUB_OUTPUT
#          echo "api_names=${{ format('[{0}]', env.api_names) }}" >> $GITHUB_OUTPUT
          echo "environment=${{ steps.env-config.outputs.environment }}" >> $GITHUB_OUTPUT

#  sa:
#    name: 'Storage Account'
#    needs: [ envs ]
#    permissions: write-all
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Instantiate SA
#        uses: ./.github/actions/create-azure-sa
#        id: sa
#        with:
#          project: ${{ env.project }}
#          location: ${{ env.location }}
#          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
#          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
#          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
#        continue-on-error: false
#
#  crg:
#    name: 'Res Group & Registry'
#    needs: [ sa ]
#    permissions: write-all
#    runs-on: ubuntu-latest
#    outputs:
#      rg_location: ${{ steps.set-output.outputs.rg_location }}
#      rg_name: ${{ steps.set-output.outputs.rg_name }}
#    env:
#      rgEnvFile: "rg.tfvars"
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Get cloud config
#        id: rg-cloud-config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: ${{ env.configFile }}
#          prop_path: "resource-group"
#
#      - name: convert to json
#        id: rgjson
#        uses: schdck/create-env-json@v1
#        with:
#          file-name: ${{ env.rgEnvFile }}
#          prefix: ${{ env.project }}
#          location: ${{ env.location }}
#          prevent_resource_deletion:  ${{steps.rg-cloud-config.outputs.prevent_resource_deletion}}
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ env.rgEnvFile }}
#          path: ${{ env.rgEnvFile }}
#
#      - name: Instantiate RG & CR
#        uses: ./.github/actions/tf-azure-script
#        id: rg
#        with:
#          project: ${{ env.project }}
#          envFile: ${{ env.rgEnvFile }}
#          key: ${{ env.project }}-rg
#          working-directory: "tf/azure/crg"
#          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
#          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
#          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
#          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
#        continue-on-error: false
#
#      - name: Set output
#        id: set-output
#        run: |
#          echo "rg_location=${{ env.rg_location }}" >> $GITHUB_OUTPUT
#          echo "rg_name=${{ env.rg_name }}" >> $GITHUB_OUTPUT
#
#  vn:
#    name: 'Virtual Network'
#    needs: [ crg ]
#    permissions: write-all
#    runs-on: ubuntu-latest
#    outputs:
#      virtual_network_id: ${{ steps.set-output.outputs.virtual_network_id }}
#      virtual_network_name: ${{ steps.set-output.outputs.virtual_network_name }}
#      virtual_subnet_name: ${{ steps.set-output.outputs.virtual_subnet_name }}
#      virtual_subnet_id: ${{ steps.set-output.outputs.virtual_subnet_id }}
#    env:
#      vnEnvFile: "vn.tfvars"
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Get cloud config
#        id: vn-cloud-config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: ${{ env.configFile }}
#          prop_path: "virtual-network"
#
#      - name: convert to json
#        id: vmjson
#        uses: schdck/create-env-json@v1
#        with:
#          file-name: ${{ env.vnEnvFile }}
#          prefix: ${{ env.project }}
#          location: ${{ needs.crg.outputs.rg_location }}
#          group: ${{ needs.crg.outputs.rg_name }}
#          address_prefix: ${{steps.vn-cloud-config.outputs.address_prefix}}
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ env.vnEnvFile }}
#          path: ${{ env.vnEnvFile }}
#
#      - name: Instantiate VN
#        uses: ./.github/actions/tf-azure-script
#        id: vn
#        with:
#          project: ${{ env.project }}
#          envFile: ${{ env.vnEnvFile }}
#          key: ${{ env.project }}-vn
#          working-directory: "tf/azure/vnet"
#          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
#          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
#          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
#          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
#        continue-on-error: false
#
#      - name: Set output
#        id: set-output
#        run: |
#          echo "virtual_network_id=${{ env.virtual_network_id }}" >> $GITHUB_OUTPUT
#          echo "virtual_network_name=${{ env.virtual_network_name }}" >> $GITHUB_OUTPUT
#          echo "virtual_subnet_name=${{ env.virtual_subnet_name }}" >> $GITHUB_OUTPUT
#          echo "virtual_subnet_id=${{ env.virtual_subnet_id }}" >> $GITHUB_OUTPUT
#  vms:
#    name: Virtual Machines ${{ matrix.items }}
#    needs: [ envs, crg, vn ]
#    permissions: write-all
#    runs-on: ubuntu-latest
#    env:
#      vm: ${{ needs.envs.outputs.vm_names }}
#      vmEnvFile: "vms-${{ matrix.items }}.tfvars"
#    strategy:
#      matrix:
#        items: ${{ fromJSON(needs.envs.outputs.vm_names) }}
#    outputs:
#      vm_names: ${{ steps.set-output.outputs.vm_names }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Get cloud config
#        id: vm-cloud-config
#        uses: ActionsTools/read-json-action@main
#        with:
#          file_path: ${{ env.configFile }}
#          prop_path: "virtual-machine"
#
#      - name: Print VM Info
#        id: vm-info
#        run: |
#          echo "vm name ${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['name'] }}"
#          echo "vm count ${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['vmCount'] }}"
#
#      - name: convert to json
#        id: vmjson
#        uses: schdck/create-env-json@v1
#        with:
#          file-name: ${{ env.vmEnvFile }}
#          prefix: ${{ env.project }}
#          group: ${{ needs.crg.outputs.rg_name }}
#          name: ${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['name'] }}
#          vm_count: ${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['vmCount'] }}
#          admin_password: ${{ secrets.VM_PASSWORD }}
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ env.vmEnvFile }}
#          path: ${{ env.vmEnvFile }}
#
#      - name: Instantiate VMachine(s)
#        uses: ./.github/actions/tf-azure-script
#        id: vm
#        with:
#          project: ${{ env.project }}
#          envFile: ${{ env.vmEnvFile }}
#          key: ${{ env.project }}-${{ matrix.items }}-vmss
#          working-directory: "tf/azure/vm"
#          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
#          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
#          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
#          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
#        continue-on-error: false
#
#      - name: Set output
#        id: set-output
#        run: |
#          echo "vm_names=${{ env.vm_names }}" >> $GITHUB_OUTPUT
#  gw:
#    name: Application Gateway
#    needs: [ envs, crg, vms ]
#    permissions: write-all
#    runs-on: ubuntu-latest
#    outputs:
#      gw_name: ${{ steps.set-output.outputs.gw_name }}
#    env:
#      vm: ${{ needs.envs.outputs.vm_names }}
#      gwEnvFile: "gw.tfvars"
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: convert to json
#        id: gwjson
#        uses: schdck/create-env-json@v1
#        with:
#          file-name: ${{ env.gwEnvFile }}
#          prefix: ${{ env.project }}
#          group: ${{ needs.crg.outputs.rg_name }}
#          vm_labels: ${{ needs.crg.outputs.rg_name }}
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ env.gwEnvFile }}
#          path: ${{ env.gwEnvFile }}
#
#      - name: Initialize Gateway
#        uses: ./.github/actions/tf-azure-script
#        id: vm
#        with:
#          project: ${{ env.project }}
#          envFile: ${{ env.gwEnvFile }}
#          key: ${{ env.project }}-gw
#          working-directory: "tf/azure/gw"
#          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
#          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
#          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
#          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
#        continue-on-error: false
#
#      - name: Set output
#        id: set-output
#        run: |
#          echo "gw_name=${{ env.gw_name }}" >> $GITHUB_OUTPUT
#
#  gwc:
#    name: Gateway Config ${{ matrix.items }}
#    needs: [ envs, gw ]
#    permissions: write-all
#    runs-on: ubuntu-latest
#    outputs:
#      gw_name: ${{ steps.set-output.outputs.gw_name }}
#    env:
#      vm: ${{ needs.envs.outputs.vm_names }}
#      gwcEnvFile: "gwc-${{ matrix.items }}.tfvars"
#    strategy:
#      matrix:
#        items: ${{ fromJSON(needs.envs.outputs.vm_names) }}
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: convert to json
#        id: gwjson
#        uses: schdck/create-env-json@v1
#        with:
#          file-name: ${{ env.gwcEnvFile }}
#          prefix: ${{ env.project }}
#          group: ${{ needs.crg.outputs.rg_name }}
#          name: ${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['name'] }}
#          vm_count: ${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['vmCount'] }}
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ env.gwcEnvFile }}
#          path: ${{ env.gwcEnvFile }}
#
#      - name: Configure Gateway
#        uses: ./.github/actions/tf-azure-script
#        id: vm
#        with:
#          project: ${{ env.project }}
#          envFile: ${{ env.gwcEnvFile }}
#          key: ${{ env.project }}-gwc
#          working-directory: "tf/azure/gwc"
#          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
#          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
#          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
#          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
#        continue-on-error: false
#
#      - name: Set output
#        id: set-output
#        run: |
#          echo "gw_name=${{ env.gw_name }}" >> $GITHUB_OUTPUT
#          echo "backend_pool_name=${{ env.backend_pool_name }}" >> $GITHUB_OUTPUT