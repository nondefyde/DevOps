name: AZR DEPLOY VMS

on:
  push:
    branches:
      - 'mains'
permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  configFile: "configs/cloud.json"
  scriptPath: "tf/azure"

jobs:
  envs:
    name: 'Set Envs'
    runs-on: ubuntu-latest
    outputs:
      prevent_resource_deletion: ${{ steps.variables.outputs.prevent_resource_deletion }}
      prefix: ${{ steps.variables.outputs.prefix }}
      project: ${{ steps.variables.outputs.project }}
      location: ${{ steps.variables.outputs.location }}
      base_domain: ${{ steps.variables.outputs.base_domain }}
      api_subdomain: ${{ steps.variables.outputs.api_subdomain }}
      vm_names: ${{ steps.variables.outputs.vm_names }}
      api_names: ${{ steps.variables.outputs.api_names }}
      app_names: ${{ steps.variables.outputs.app_names }}
      api_suffixes: ${{ steps.variables.outputs.api_suffixes }}
      vault_name: ${{ steps.variables.outputs.vault_name }}
      vault_rg: ${{ steps.variables.outputs.vault_rg }}
      cert_name: ${{ steps.variables.outputs.cert_name }}
      probe_url: ${{ steps.variables.outputs.probe_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set App Envs
        id: get-envs
        uses: ./.github/actions/set-envs
        with:
          config-file: ${{ env.configFile }}
      - name: Set Outputs
        id: variables
        shell: bash
        run: |
          for VAR in $(compgen -e); do
            echo "${VAR,,}=${!VAR}" >> $GITHUB_OUTPUT
          done
          
          echo "vm_names=${{ format('[{0}]', env.vm_names) }}" >> $GITHUB_OUTPUT
          echo "api_names=${{ format('[{0}]', env.api_names) }}" >> $GITHUB_OUTPUT

  sa:
    name: 'Stg Acc'
    needs: [ envs ]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      location: ${{ needs.envs.outputs.location }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Instantiate SA
        uses: ./.github/actions/create-azure-sa
        id: sa
        with:
          project: ${{ env.project }}
          location: ${{ env.location }}
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

  crg:
    name: 'Res & Cr'
    needs: [ envs, sa ]
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      rg_location: ${{ steps.set-output.outputs.rg_location }}
      rg_name: ${{ steps.set-output.outputs.rg_name }}
    env:
      project: ${{ needs.envs.outputs.project }}
      prefix: ${{ needs.envs.outputs.prefix }}
      location: ${{ needs.envs.outputs.location }}
      base_domain: ${{ needs.envs.outputs.base_domain }}
      prevent_resource_deletion: ${{ needs.envs.outputs.prevent_resource_deletion }}
      rgEnvFile: "rg.tfvars"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: convert to json
        id: rgjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.rgEnvFile }}
          prefix: ${{ env.prefix }}
          project: ${{ env.project }}
          location: ${{ env.location }}
          prevent_resource_deletion:  ${{ env.prevent_resource_deletion }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.rgEnvFile }}
          path: ${{ env.rgEnvFile }}

      - name: Instantiate RG & CR
        uses: ./.github/actions/tf-azure-script
        id: rg
        with:
          project: ${{ env.project }}
          envFile: ${{ env.rgEnvFile }}
          key: ${{ env.project }}-rg
          working-directory: ${{ env.scriptPath}}/crg
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "rg_location=${{ env.rg_location }}" >> $GITHUB_OUTPUT
          echo "rg_name=${{ env.rg_name }}" >> $GITHUB_OUTPUT

  vn:
    name: 'VNet'
    needs: [ envs, crg ]
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      virtual_network_id: ${{ steps.set-output.outputs.virtual_network_id }}
      virtual_network_name: ${{ steps.set-output.outputs.virtual_network_name }}
    env:
      project: ${{ needs.envs.outputs.project }}
      prefix: ${{ needs.envs.outputs.prefix }}
      location: ${{ needs.envs.outputs.location }}
      environment: ${{ needs.envs.outputs.environment }}
      base_domain: ${{ needs.envs.outputs.base_domain }}
      vnEnvFile: "vn.tfvars"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: convert to json
        id: vmjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.vnEnvFile }}
          prefix: ${{ env.prefix }}
          environment: ${{ env.environment }}
          group: ${{ needs.crg.outputs.rg_name }}
          base_domain: ${{ env.base_domain }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.vnEnvFile }}
          path: ${{ env.vnEnvFile }}

      - name: Instantiate VNet
        uses: ./.github/actions/tf-azure-script
        id: vn
        with:
          project: ${{ env.project }}
          envFile: ${{ env.vnEnvFile }}
          key: ${{ env.project }}-vn
          working-directory: ${{ env.scriptPath}}/vnet
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "virtual_network_id=${{ env.virtual_network_id }}" >> $GITHUB_OUTPUT
          echo "virtual_network_name=${{ env.virtual_network_name }}" >> $GITHUB_OUTPUT

  bst:
    name: 'Baston Host'
    needs: [ envs, crg, vn ]
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      baston_dns: ${{ steps.set-output.outputs.baston_dns }}
      baston_id: ${{ steps.set-output.outputs.baston_id }}
    env:
      project: ${{ needs.envs.outputs.project }}
      prefix: ${{ needs.envs.outputs.prefix }}
      location: ${{ needs.envs.outputs.location }}
      base_domain: ${{ needs.envs.outputs.base_domain }}
      environment: ${{ needs.envs.outputs.environment }}
      vnEnvFile: "vn.tfvars"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: convert to json
        id: vmjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.vnEnvFile }}
          prefix: ${{ env.prefix }}
          environment: ${{ env.environment }}
          group: ${{ needs.crg.outputs.rg_name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.vnEnvFile }}
          path: ${{ env.vnEnvFile }}

      - name: Instantiate Baston
        uses: ./.github/actions/tf-azure-script
        id: vn
        with:
          project: ${{ env.project }}
          envFile: ${{ env.vnEnvFile }}
          key: ${{ env.project }}-bst
          working-directory: ${{ env.scriptPath}}/bst
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "baston_dns=${{ env.baston_dns }}" >> $GITHUB_OUTPUT
          echo "baston_id=${{ env.baston_id }}" >> $GITHUB_OUTPUT
  vms:
    name: VM ${{ matrix.items }}
    needs: [ envs, crg, vn ]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      prefix: ${{ needs.envs.outputs.prefix }}
      location: ${{ needs.envs.outputs.location }}
      environment: ${{ needs.envs.outputs.environment }}
      base_domain: ${{ needs.envs.outputs.base_domain }}
      vm: ${{ needs.envs.outputs.vm_names }}
      vmEnvFile: "vms-${{ matrix.items }}.tfvars"
    strategy:
      matrix:
        items: ${{ fromJSON(needs.envs.outputs.vm_names) }}
    outputs:
      vm_names: ${{ steps.set-output.outputs.vm_names }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get cloud config
        id: config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "virtual-machine"

      - name: Print VM Info
        id: vm-info
        run: |
          echo "vm name ${{ fromJson(steps.config.outputs.vms)[matrix.items]['name'] }}"
          echo "vm count ${{ fromJson(steps.config.outputs.vms)[matrix.items]['vmCount'] }}"

      - name: convert to json
        id: vmjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.vmEnvFile }}
          prefix: ${{ env.prefix }}
          environment: ${{ env.environment }}
          base_domain: ${{ env.base_domain }}
          group: ${{ needs.crg.outputs.rg_name }}
          name: ${{ fromJson(steps.config.outputs.vms)[matrix.items]['name'] }}
          vm_count: ${{ fromJson(steps.config.outputs.vms)[matrix.items]['vmCount'] }}
          disk_size: ${{ fromJson(steps.config.outputs.vms)[matrix.items]['disk_size'] }}
          admin_password: ${{ secrets.VM_PASSWORD }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.vmEnvFile }}
          path: ${{ env.vmEnvFile }}

      - name: Instantiate VMachine(s)
        uses: ./.github/actions/tf-azure-script
        id: vm
        with:
          project: ${{ env.project }}
          envFile: ${{ env.vmEnvFile }}
          key: ${{ env.project }}-${{ matrix.items }}-vm
          working-directory: ${{ env.scriptPath}}/vm
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "vm_names=${{ env.vm_names }}" >> $GITHUB_OUTPUT
  apim:
    name: Api Management Service
    needs: [ envs, crg, vn ]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      prefix: ${{ needs.envs.outputs.prefix }}
      base_domain: ${{ needs.envs.outputs.base_domain }}
      api_subdomain: ${{ needs.envs.outputs.api_subdomain }}
      vault_rg: ${{ needs.envs.outputs.vault_rg }}
      vault_name: ${{ needs.envs.outputs.vault_name }}
      cert_name: ${{ needs.envs.outputs.cert_name }}
      apimEnvFile: "apim.tfvars"
    outputs:
      apim_id: ${{ steps.set-output.outputs.apim_id }}
      gateway_url: ${{ steps.set-output.outputs.gateway_url }}
      portal_url: ${{ steps.set-output.outputs.portal_url }}
      developer_portal_url: ${{ steps.set-output.outputs.developer_portal_url }}
      management_api_url: ${{ steps.set-output.outputs.management_api_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get cloud config
        id: config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "api-management"

      - name: convert to json
        id: apimjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.apimEnvFile }}
          prefix: ${{ env.prefix }}
          group: ${{ needs.crg.outputs.rg_name }}
          environment: ${{ needs.envs.outputs.environment }}
          capacity: ${{steps.config.outputs.capacity }}
          sku: ${{steps.config.outputs.sku }}
          base_domain: ${{ env.base_domain }}
          publisher_name: ${{steps.config.outputs.publisher_name }}
          publisher_email: ${{steps.config.outputs.publisher_email}}
          vault_name: ${{ env.vault_name }}
          vault_rg: ${{ env.vault_rg }}
          cert_name: ${{ env.cert_name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.apimEnvFile }}
          path: ${{ env.apimEnvFile }}

      - name: Instantiate API Magt Services
        uses: ./.github/actions/tf-azure-script
        id: apim
        with:
          project: ${{ env.project }}
          envFile: ${{ env.apimEnvFile }}
          key: ${{ env.project }}-apim
          working-directory: ${{ env.scriptPath}}/apim
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "apim_id=${{ env.apim_id }}" >> $GITHUB_OUTPUT

  apimp:
    name: Api Services ${{ matrix.items }}
    needs: [ envs, crg, apim ]
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      project: ${{ needs.envs.outputs.project }}
      prefix: ${{ needs.envs.outputs.prefix }}
      base_domain: ${{ needs.envs.outputs.base_domain }}
      api_subdomain: ${{ needs.envs.outputs.api_subdomain }}
      api_names: ${{ needs.envs.outputs.api_names }}
      apimpEnvFile: "apimp-${{ matrix.items }}.tfvars"
    outputs:
      apim_id: ${{ steps.set-output.outputs.apim_id }}
    strategy:
      matrix:
        items: ${{ fromJSON(needs.envs.outputs.api_names) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get api config
        id: config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "api-management"

      - name: convert to json
        id: apimpjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.apimpEnvFile }}
          prefix: ${{ env.prefix }}
          group: ${{ needs.crg.outputs.rg_name }}
          name: ${{ matrix.items }}
          display_name: ${{ fromJson(steps.config.outputs.apis)[matrix.items]['name'] }}
          suffix: ${{ fromJson(steps.config.outputs.apis)[matrix.items]['suffix'] }}
          endpoints: ${{ fromJson(steps.config.outputs.apis)[matrix.items]['endpoints'] }}
          port: ${{ fromJson(steps.config.outputs.apis)[matrix.items]['port'] }}
          base_domain: ${{ env.base_domain }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.apimpEnvFile }}
          path: ${{ env.apimpEnvFile }}

      - name: Api Setups
        uses: ./.github/actions/tf-azure-script
        id: apim
        with:
          project: ${{ env.project }}
          envFile: ${{ env.apimpEnvFile }}
          key: ${{ env.project }}-${{ matrix.items }}-apimp
          working-directory: ${{ env.scriptPath}}/apimp
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "api_management_api_name=${{ env.api_management_api_name }}" >> $GITHUB_OUTPUT
          echo "api_management_api_id=${{ env.api_management_api_id }}" >> $GITHUB_OUTPUT

  gw:
    name: Application Gateway
    needs: [ envs, crg, apim ]
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      gw_name: ${{ steps.set-output.outputs.gw_name }}
    env:
      project: ${{ needs.envs.outputs.project }}
      prefix: ${{ needs.envs.outputs.prefix }}
      probe_url: ${{ needs.envs.outputs.probe_url }}
      base_domain: ${{ needs.envs.outputs.base_domain }}
      api_subdomain: ${{ needs.envs.outputs.api_subdomain }}
      app_names: ${{ needs.envs.outputs.app_names }}
      api_suffixes: ${{ needs.envs.outputs.api_suffixes }}
      vm: ${{ needs.envs.outputs.vm_names }}
      gwEnvFile: "gw.tfvars"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Vault cloud config
        id: kvu-cloud-config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "key-vault"

      - name: convert to json
        id: gwjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.gwEnvFile }}
          prefix: ${{ env.prefix }}
          group: ${{ needs.crg.outputs.rg_name }}
          api_suffixes: ${{ env.api_suffixes }}
          base_domain: ${{ env.base_domain }}
          api_subdomain: ${{ env.api_subdomain }}
          vault_name: ${{steps.kvu-cloud-config.outputs.vault_name }}
          vault_rg: ${{steps.kvu-cloud-config.outputs.vault_rg }}
          cert_name: ${{steps.kvu-cloud-config.outputs.cert_name }}
          cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          probe_url: ${{ env.probe_url }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.gwEnvFile }}
          path: ${{ env.gwEnvFile }}

      - name: Initialize Gateway
        uses: ./.github/actions/tf-azure-script
        id: vm
        with:
          project: ${{ env.project }}
          envFile: ${{ env.gwEnvFile }}
          key: ${{ env.project }}-gw
          working-directory: ${{ env.scriptPath}}/gw
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "gw_name=${{ env.gw_name }}" >> $GITHUB_OUTPUT

  gwc:
    name: Gateway Config ${{ matrix.items }}
    needs: [ envs, crg, gw ]
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      gw_name: ${{ steps.set-output.outputs.gw_name }}
    env:
      prefix: ${{ needs.envs.outputs.prefix }}
      project: ${{ needs.envs.outputs.project }}
      base_domain: ${{ needs.envs.outputs.base_domain }}
      vm: ${{ needs.envs.outputs.vm_names }}
      gwcEnvFile: "gwc-${{ matrix.items }}.tfvars"
    strategy:
      matrix:
        items: ${{ fromJSON(needs.envs.outputs.vm_names) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get cloud config
        id: vm-cloud-config
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ${{ env.configFile }}
          prop_path: "virtual-machine"

      - name: convert to json
        id: gwcjson
        uses: schdck/create-env-json@v1
        with:
          file-name: ${{ env.gwcEnvFile }}
          prefix: ${{ env.prefix }}
          group: ${{ needs.crg.outputs.rg_name }}
          name: ${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['name'] }}
          vm_count: ${{ fromJson(steps.vm-cloud-config.outputs.vms)[matrix.items]['vmCount'] }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.gwcEnvFile }}
          path: ${{ env.gwcEnvFile }}

      - name: Configure Gateway
        uses: ./.github/actions/tf-azure-script
        id: vm
        with:
          project: ${{ env.project }}
          envFile: ${{ env.gwcEnvFile }}
          key: ${{ env.project }}-${{ matrix.items }}-gwc
          working-directory: "tf/azure/gwc"
          AZR_CLIENT_ID: ${{secrets.AZR_CLIENT_ID}}
          AZR_CLIENT_SECRET: ${{secrets.AZR_CLIENT_SECRET}}
          AZR_SUBSCRIPTION_ID: ${{secrets.AZR_SUBSCRIPTION_ID}}
          AZR_TENANT_ID: ${{secrets.AZR_TENANT_ID}}
        continue-on-error: false

      - name: Set output
        id: set-output
        run: |
          echo "gw_name=${{ env.gw_name }}" >> $GITHUB_OUTPUT
          echo "backend_pool_name=${{ env.backend_pool_name }}" >> $GITHUB_OUTPUT
