name: set-envs
author: Emmanuel Okafor
decription: A generic action to get app global based envs

inputs:
  config-file:
    required: true
  service:
    type: string
#  hostname-format:
#    type: string
#  base-domain:
#    type: string
#    default: "stardevs.xyz"
#  dockerfile:
#    type: string
#    default: "./Dockerfile"
#  environment:
#    type: string
#    default: "staging"
#  api-subdomain:
#    type: string
#    default: "servicies"
#  port:
#    type: number
#    default: 8000

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Cloud Config
      id: env-config
      uses: ActionsTools/read-json-action@main
      with:
        file_path: ${{ inputs.config-file }}

    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: ${{ inputs.config-file }}

    - name: APP config
      id: config
      uses: ActionsTools/read-json-action@main
      with:
        file_path: ${{ inputs.config-file }}

    - name: Initialize environments
      shell: bash
      run: |        
        SERVICE_JSON=${{ fromJson(steps.config.outputs.service) }}    
        echo "SERVICE_JSON ${SERVICE_JSON}"
#         LC="${{inputs.location}}"
#         SD="${{inputs.service_domain}}"
#         AD="${{inputs.api_subdomain}}"
#
#         CONFIG_PREFIX="hello"
#         echo "PREFIX ${CONFIG_PREFIX}"
#        CONFIG_LOCATION="${{ steps.config.outputs.location }}"
#        CONFIG_BASE_DOMAIN="${{ steps.config.outputs.base_domain }}"
#        CONFIG_API_SUB_DOMAIN="${{ steps.config.outputs.api_subdomain }}"
#
#
#        ES="${{inputs.service}}"
#        PRT="${{inputs.port}}"
#        HOST_FMT="${{inputs.hostname-format}}"
#        ENV_HOST_FMT="${{ env.hostname_format }}"
#        DOCFILE="${{ inputs.dockerfile }}"
#
#        PREFIX="${${{inputs.prefix}}:-${{ steps.config.outputs.prefix }}}"
#        PROJECT="${EP:-$CONFIG_PROJECT}"
#        LOCATION="${LC:-$CONFIG_LOCATION}"
#        SERVICE_DOMAIN="${SD:-$CONFIG_SERVICE_DOMAIN}"
#        API_SUB_DOMAIN="${AD:-$CONFIG_API_SUB_DOMAIN}"
#        SERVICE="${ES:-${{env.service}}}"
#        PORT="${PRT:-${{env.port}}}"
#
#        HOST_FORMAT="${HOST_FMT:-$ENV_HOST_FMT}"
#        DOCKER_FILE="${DOCFILE:-${{ env.dockerfile }}}"
#
        echo "prefix=${{ steps.config.outputs.prefix }}}" >> "$GITHUB_ENV"
#        echo "location=${LOCATION}" >> "$GITHUB_ENV"
#        echo "service_domain=${SERVICE_DOMAIN}" >> "$GITHUB_ENV"
#        echo "api_subdomain=${API_SUB_DOMAIN}" >> "$GITHUB_ENV"
#        echo "service=${SERVICE}" >> "$GITHUB_ENV"
#        echo "port=${PORT}" >> "$GITHUB_ENV"
#        echo "hostname-format=${HOST_FORMAT}" >> "$GITHUB_ENV"
#        echo "dockerfile=${DOCKER_FILE}" >> "$GITHUB_ENV"
#
#    - name: VM config
#      id: vm-config
#      uses: ActionsTools/read-json-action@main
#      with:
#        file_path: ${{ inputs.configFile }}
#        prop_path: "virtual-machine"
#
#    - name: API config
#      id: api-config
#      uses: ActionsTools/read-json-action@main
#      with:
#        file_path: ${{ inputs.configFile }}
#        prop_path: "api-management"
#
#    - name: Output api names
#      id: set-apis
#      shell: bash
#      run: |
#        data=${{ toJson(steps.api-config.outputs.apis) }}
#        names=$(echo $data | jq -r 'keys[]')
#        names_array=($names)
#        string_array=""
#        for name in "${names_array[@]}"; do
#          string_array+="'$name',"
#        done
#        string_array=${string_array%?}
#        echo "api_names=$string_array" >> "$GITHUB_ENV"
#
#    - name: Output vm names
#      id: set-vm
#      shell: bash
#      run: |
#        data=${{ toJson(steps.vm-config.outputs.vms) }}
#        names=$(echo $data | jq -r 'keys[]')
#        names_array=($names)
#        string_array=""
#        for name in "${names_array[@]}"; do
#          string_array+="'$name',"
#        done
#        string_array=${string_array%?}
#        echo "vm_names=$string_array" >> "$GITHUB_ENV"
#
#    - name: Output app names
#      id: set-name
#      shell: bash
#      run: |
#        data=${{ toJson(steps.api-config.outputs.apis) }}
#        names=$(echo $data | jq -r 'keys[]')
#        names_array=($names)
#        string_array=$( IFS=','; echo "${names_array[*]}" )
#        echo "app_names=$string_array" >> "$GITHUB_ENV"
#
#    - name: Output api suffixes
#      id: set-api-suffixes
#      shell: bash
#      run: |
#        data=${{ toJson(steps.api-config.outputs.apis) }}
#        vmdata=${{ toJson(steps.vm-config.outputs.vms) }}
#        port=($(echo $vmdata | jq -r '.[] | .port'))
#        priority=($(echo $vmdata | jq -r '.[] | .priority'))
#        suffixes=($(echo $data | jq -r '.[] | .suffix'))
#        names=($(echo $data | jq -r 'keys[]'))
#        output=""
#        for i in ${!suffixes[@]}; do
#          if [[ -n "$output" ]]; then
#            output="$output,"
#          fi
#          output="$output${names[$i]}:${suffixes[$i]}:${port[$i]}:${priority[$i]}"
#        done
#        echo "api_suffixes=$output" >> "$GITHUB_ENV"
