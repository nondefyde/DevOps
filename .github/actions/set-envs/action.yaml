name: set-envs
author: Emmanuel Okafor
decription: A generic action to get app global based envs

inputs:
  configFile:
    required: true
  project:
    type: string
  service:
    type: string
  hostname-format:
    type: string
  port:
    type: string
  dockerfile:
    type: string

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialize environments
      shell: bash
      run: |
        EP="${{inputs.project}}"
        ES="${{inputs.service}}"
        PRT="${{inputs.port}}"
        HOST_FMT="${{inputs.hostname-format}}"
        ENV_HOST_FMT="${{env.current_hostname_format}}"
        DOCFILE="${{ inputs.dockerfile }}"

        PROJECT="${EP:-${{env.current_project}}}"
        SERVICE="${ES:-${{env.current_service}}}"
        PORT="${PRT:-${{env.current_port}}}"

        HOST_FORMAT="${HOST_FMT:-$ENV_HOST_FMT}"
        DOCKER_FILE="${DOCFILE:-${{ env.dockerfile }}}"

        echo "project=${PROJECT}" >> "$GITHUB_ENV"
        echo "service=${SERVICE}" >> "$GITHUB_ENV"
        echo "port=${PORT}" >> "$GITHUB_ENV"
        echo "hostname-format=${HOST_FORMAT}" >> "$GITHUB_ENV"
        echo "dockerfile=${DOCKER_FILE}" >> "$GITHUB_ENV"

    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: ${{ inputs.configFile }}

    - name: Cloud Config
      id: env-config
      uses: ActionsTools/read-json-action@main
      with:
        file_path: ${{ inputs.configFile }}

    - name: VM config
      id: vm-config
      uses: ActionsTools/read-json-action@main
      with:
        file_path: ${{ inputs.configFile }}
        prop_path: "virtual-machine"

    - name: VM config
      id: api-config
      uses: ActionsTools/read-json-action@main
      with:
        file_path: ${{ inputs.configFile }}
        prop_path: "api-management"
#
#    - name:
#      id: set-apis
#      shell: bash
#      run: |
#        data=${{ toJson(steps.api-config.outputs.apis) }}
#        names=$(echo $data | jq -r 'keys[]')
#        names_array=($names)
#        string_array=""
#        for name in "${names_array[@]}"; do
#          string_array+="'$name',"
#        done
#        string_array=${string_array%?}
#        echo "api_names=$string_array" >> "$GITHUB_ENV"
#
#    - name:
#      id: set-vm
#      shell: bash
#      run: |
#        data=${{ toJson(steps.vm-config.outputs.vms) }}
#        names=$(echo $data | jq -r 'keys[]')
#        names_array=($names)
#        string_array=""
#        for name in "${names_array[@]}"; do
#          string_array+="'$name',"
#        done
#        string_array=${string_array%?}
#        echo "vm_names=$string_array" >> "$GITHUB_ENV"
#
#
#    - name:
#        id: set-name
#        shell: bash
#        run: |
#          data=${{ toJson(steps.api-config.outputs.apis) }}
#          names=$(echo $data | jq -r 'keys[]')
#          names_array=($names)
#          string_array=$( IFS=','; echo "${names_array[*]}" )
#          echo "app_names=$string_array" >> "$GITHUB_ENV"