name: run-tf-azure-script
author: Emmanuel Okafor
decription: A generic action to run terraform script

inputs:
  AZR_CLIENT_ID:
    required: true
  AZR_CLIENT_SECRET:
    required: true
  AZR_SUBSCRIPTION_ID:
    required: true
  AZR_TENANT_ID:
    required: true

  TFDestroy:
    description: 'Destroy Setup'
    required: true
    default: false

  envFile:
    description: 'Environment'
    required: true
  project:
    description: 'Entry project name'
    required: true
  key:
    description: 'Entry group name'
    required: true
    default: 'key'
  working-directory:
    description: 'Default working directory'
    default: 'tf'
  variable-path:
    description: 'The Path to variable'

outputs:
  rg_name:
    description: The resource group name
  rg_location:
    description: The resource group location

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Echo env for debug
      shell: bash
      run: echo "TFDestroy >>>>> ${{ inputs.TFDestroy }}"

    - name: Restore cache
      uses: actions/cache@v2
      with:
        key: file-${{ runner.os }}-${{ github.run_id }}
        path: ${{ inputs.envFile }}
        restore: true

    - name: Copy env to working directory
      shell: bash
      run: mv "${{ inputs.envFile }}" ./${{ inputs.working-directory }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "Execute Terraform Init : ${{ inputs.working-directory }} - ${{ inputs.project }} ${{ inputs.key }}"
        mkdir -p _state
        terraform init \
          -backend-config="resource_group_name=${{ inputs.project }}-tfstate" \
          -backend-config="storage_account_name=${{ inputs.project }}storage" \
          -backend-config="container_name=${{ inputs.project }}tfstate" \
          -backend-config="key=${{ inputs.key }}-vm.terraform.tfstate" \
          -backend-config="subscription_id=${{ inputs.AZR_SUBSCRIPTION_ID }}" \
          -backend-config="tenant_id=${{ inputs.AZR_TENANT_ID }}" \
          -backend-config="client_id=${{ inputs.AZR_CLIENT_ID }}" \
          -backend-config="client_secret=${{ inputs.AZR_CLIENT_SECRET }}"
      continue-on-error: false

    - name: Terraform Plan
      id: plan
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "Execute Terraform Plan : ${{ inputs.working-directory }} - ${{ inputs.project }} ${{ inputs.key }}"
        mkdir -p _state
        terraform plan -no-color -input=false \
          -var=subscription_id="${{ inputs.AZR_SUBSCRIPTION_ID }}" \
          -var=tenant_id="${{ inputs.AZR_TENANT_ID }}" \
          -var=client_id="${{ inputs.AZR_CLIENT_ID }}" \
          -var=client_secret="${{ inputs.AZR_CLIENT_SECRET }}" \
          -var-file=./${{ inputs.envFile }} \
          -out ./_state/${{ inputs.project }}.tfplan \
          -lock=false
      continue-on-error: false

    - name: Terraform Apply
      if: ${{ inputs.TFDestroy == 'false' }}
      id: apply
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Execute Terraform Apply : ${{ inputs.working-directory }} - ${{ inputs.project }} ${{ inputs.key }}"
        terraform apply -auto-approve -input=false ./_state/${{ inputs.project }}.tfplan
        echo "Terraform Application was successful ${{ inputs.project }}"
        terraform output -json > ${{ inputs.key }}.json
        echo "The output saved to file to ${{ inputs.key }}.json"
      continue-on-error: false

    - name: Install jq
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Export Output to environments
      if: ${{ inputs.TFDestroy == 'false' }}
      id: tf_output
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo File name ${{ inputs.key }}.json
        file=${{ inputs.key }}.json
        outputs=$(terraform output -json)
        echo "outputs >>> >>>>> $outputs"
        for key in $(echo $outputs | jq -r 'keys[]'); do
          KEY=$(echo "${key}")
          VALUE=$(echo "${outputs}" | jq -r ".${key}.value")
          echo "export $KEY=$VALUE"
          export "$KEY=$VALUE"
        done

#    - name: Print environment variable
#      shell: bash
#      run: |
#        cat ${{ inputs.working-directory }}/${{ inputs.key }}.json
#        chmod +x ./scripts/exenv.sh
#        ./scripts/exenv.sh ${{ inputs.working-directory }}/${{ inputs.key }}.json
#        echo "rg_location: $rg_location"
#        echo "rg_name: $rg_name"

    - name: Terraform Destroy
      if: ${{ inputs.TFDestroy == 'true' }}
      id: destroy
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Terraform Destruction in progress ${{ inputs.project }}"
        terraform -destroy -no-color -input=false \
          -var=app_project_prefix="${{ inputs.project}}" \
          -var=subscription_id="${{ inputs.AZR_SUBSCRIPTION_ID }}" \
          -var=tenant_id="${{ inputs.AZR_TENANT_ID }}" \
          -var=client_id="${{ inputs.AZR_CLIENT_ID }}" \
          -var=client_secret="${{ inputs.AZR_CLIENT_SECRET }}" \
          -var-file=./${{ inputs.envFile }} \
          -out ./_state/${{ inputs.project }}.destroy.tfplan \
          -lock=false
        terraform apply -auto-approve -input=false ./_state/${{ inputs.project }}.destroy.tfplan
        echo "Terraform Destruction in successful ${{ inputs.project }}"
      continue-on-error: false