name: run-tf-azure-script
author: Emmanuel Okafor
decription: A generic action to run terraform script

inputs:
  AZR_CLIENT_ID:
    required: true
  AZR_CLIENT_SECRET:
    required: true
  AZR_SUBSCRIPTION_ID:
    required: true
  AZR_TENANT_ID:
    required: true

  destroy:
    description: 'Destroy Setup'
    required: true
    default: false

  envFile:
    description: 'Environment'
    required: true
  project:
    description: 'Entry project name'
    required: true
  key:
    description: 'Entry group name'
    required: true
    default: 'key'
  working-directory:
    description: 'Default working directory'
    default: 'tf'
  variable-path:
    description: 'The Path to variable'

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ${{ inputs.envFile }}
        key: ${{ runner.os }}-file-${{ env.envFile }}
        restore: true

    - name: Copy env to working directory
#      if: ${{ inputs.is_workflow == true }}
      run: |
        ls
        cp -a "${{ inputs.envFile }}/." ./${{ inputs.working-directory }}
        cd ./${{ inputs.working-directory }}
        ls -a

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Login Azure
      id: login
      shell: bash
      run: az login --service-principal --username ${{inputs.AZR_CLIENT_ID}} --password ${{inputs.AZR_CLIENT_SECRET}} --tenant ${{inputs.AZR_TENANT_ID}}

    - name: Terraform Init
      id: init
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "Execute Terraform Init : ${{ inputs.working-directory }} - ${{ inputs.project }} ${{ env.key }}"
        mkdir -p _state
        terraform init \
            -backend-config="resource_group_name=${{ inputs.project }}-tfstate" \
            -backend-config="storage_account_name=${{ inputs.project }}storage" \
            -backend-config="container_name=${{ inputs.project }}tfstate" \
            -backend-config="key=${{ inputs.key }}-vm.terraform.tfstate" \
            -backend-config="subscription_id=${{ inputs.AZR_SUBSCRIPTION_ID }}" \
            -backend-config="tenant_id=${{ inputs.AZR_TENANT_ID }}" \
            -backend-config="client_id=${{ inputs.AZR_CLIENT_ID }}" \
            -backend-config="client_secret=${{ inputs.AZR_CLIENT_SECRET }}"
      continue-on-error: false

    - name: Terraform Plan
      id: plan
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "Execute Terraform Plan : ${{ inputs.working-directory }} - ${{ inputs.project }} ${{ env.key }}"
        mkdir -p _state
        terraform plan -no-color -input=false \
          -var=prefix="${{ inputs.project }}" \
          -var=subscription_id="${{ inputs.AZR_SUBSCRIPTION_ID }}" \
          -var=tenant_id="${{ inputs.AZR_TENANT_ID }}" \
          -var=client_id="${{ inputs.AZR_CLIENT_ID }}" \
          -var=client_secret="${{ inputs.AZR_CLIENT_SECRET }}" \
          -var-file=${{ inputs.envFile }} \
          -out ./_state/${{ inputs.project }}.tfplan \
          -lock=false
      continue-on-error: false